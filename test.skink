// Some very important comment
use "skink:BigInteger";
namespace foo {
    union IntOrString { int, string; }
    BigInteger a = BigInteger(2);
}

interface ProductKey {
    static boolean validate(string key);
}

class Windows95Key implements ProductKey {
    void constructor(string key) {
        boolean isValid = Windows95Key.validate(key);
        if(not isValid) {
            out.throw("Not a valid key!");
        } else {
            this.key = key;
        }
    }

    static boolean validate(string key) {
        if(key.length === 8) { }
        string[] parts = key.split("-");
        string[] blacklist = ["333","444"];
        if(parts[0] in blacklist) {
            return false;
        } else if(key.length() != 11) {
            return false;
        } else {
            int i = 0;
            int sum = 0;
            while(i < parts[1].length()) {
                i += 1;
                sum = sum+int(parts[1][i]);
            }

            return sum % 7 == 0;
        }
    }

    //Overload "-"
    string neg() {
        return this.key;
    }

    //Overload printing
    string toString() {
        return "Windows95Key(#{this.key})"
    }
}

string Windows95Key:something() {
    return this.key*2;
}

void runTests() {
    foo.IntOrString a = foo.IntOrString("Hello");
    Windows95Key b = Windows95Key("111-1111111")
    out.print(a+foo.IntOrString(" World")); //-> Hello World
    out.print(b.something()); //-> 111-1111111111-1111111
    out.print(-b); //-> 111-1111111
    out.print(b); //-> Windows95Key(111-1111111)
}

runTests();