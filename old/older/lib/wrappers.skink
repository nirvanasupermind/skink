(begin
    /* Int wrapper type */
    (class Int null (begin
        (def constructor (this value) (begin
            (if (= (type value) "Int") 
                (set (prop this "value") (prop value "value")) /* Clone the int */
                (set (prop this "value") (int value)))
        ))
    
        /* Addition */
        (def add (a b) (begin
            (set b (new Int b))
            (new Int (+ (prop a "value") (prop b "value")))
        ))

        /* Subtraction */
        (def sub (a b) (begin
            (set b (new Int b))
            (new Int (- (prop a "value") (prop b "value")))
        ))

        /* Multiplication */
        (def mul (a b) (begin
            (set b (new Int b))
            (new Int (* (prop a "value") (prop b "value")))
        ))

        /* Division */
        (def div (a b) (begin
            (set b (new Int b))
            (new Int (/ (prop a "value") (prop b "value")))
        ))

        /* Modulo */
        (def mod (a b) (begin
            (set b (new Int b))
            (new Int (% (prop a "value") (prop b "value")))
        ))
        

        (def toString (a) (begin
            (string (prop a "value"))
        ))
    ))


    /* String wrapper type */
    (class String null (begin
        (def constructor (this value) (begin
            (if (= (type value) "String") 
                (set (prop this "value") (prop value "value")) /* Clone the string */
                (set (prop this "value") (string value)))
        ))

        (def toString (a) (begin
            (string (prop a "value"))
        ))
    ))

    /* Long wrapper type */
    (class Long null (begin
        (def constructor (this value) (begin
            (if (= (type value) "Long") 
                (set (prop this "value") (prop value "value")) /* Clone the long */
                (set (prop this "value") (long value)))
        ))
    
        /* Addition */
        (def add (a b) (begin
            (set b (new Long b))
            (new Long (+ (prop a "value") (prop b "value")))
        ))

        /* Subtraction */
        (def sub (a b) (begin
            (set b (new Long b))
            (new Long (- (prop a "value") (prop b "value")))
        ))

        /* Multiplication */
        (def mul (a b) (begin
            (set b (new Long b))
            (new Long (* (prop a "value") (prop b "value")))
        ))

        /* Division */
        (def div (a b) (begin
            (set b (new Long b))
            (new Long (/ (prop a "value") (prop b "value")))
        ))

        /* Modulo */
        (def mod (a b) (begin
            (set b (new Long b))
            (new Long (% (prop a "value") (prop b "value")))
        ))
        

        (def toString (a) (begin
            (string (prop a "value"))
        ))
    ))

     /* Double wrapper type */
    (class Double null (begin
        (def constructor (this value) (begin
            (if (= (type value) "Double") 
                (set (prop this "value") (prop value "value")) /* Clone the Double */
                (set (prop this "value") (double value)))
        ))
    
        /* Addition */
        (def add (a b) (begin
            (set b (new Double b))
            (new Double (+ (prop a "value") (prop b "value")))
        ))

        /* Subtraction */
        (def sub (a b) (begin
            (set b (new Double b))
            (new Double (- (prop a "value") (prop b "value")))
        ))

        /* Multiplication */
        (def mul (a b) (begin
            (set b (new Double b))
            (new Double (* (prop a "value") (prop b "value")))
        ))

        /* Division */
        (def div (a b) (begin
            (set b (new Double b))
            (new Double (/ (prop a "value") (prop b "value")))
        ))

        /* Modulo */
        (def mod (a b) (begin
            (set b (new Double b))
            (new Double (% (prop a "value") (prop b "value")))
        ))
        

        (def toString (a) (begin
            (string (prop a "value"))
        ))
    ))



    /* Boolean wrapper type */
    (class Boolean null (begin
        (def constructor (this value) (begin
            (if (= (type value) "Boolean") 
                (set (prop this "value") (prop value "value")) /* Clone the boolean */
                (set (prop this "value") (boolean value)))
        ))

        (def bool (a) (begin
            (prop a "value")
        ))

        (def toString (a) (begin
            (string (prop a "value"))
        ))
    ))
)

