/**
 * S-expression parser.
 *
 * 1. Install syntax-cli:
 *
 *   npm install -g syntax-cli
 *
 * 2. Generate the parser from this grammar:
 *
 *   syntax-cli -g parser/eva-grammar.bnf -m LALR1 -o parser/evaParser.js
 *
 * Examples:
 *
 * Atom: 42, foo, bar, "Hello World"
 *
 * List: (), (+ 5 x), (print "hello")
 */

// -----------------------------------------------
// Lexical grammar (tokens):

%lex

%%

\s+               /* skip whitespace */

\"[^\"\\\r\n]*(?:\\.[^\"\\\r\n]*)*\"   return 'STRING'

[+-]?\d+\b(?![\.\/]) return 'INT'

([+-]?([0-9]*[.])[0-9]+) return 'FLOAT'

[\w\-+*=<>/%!\&\|]+     return 'SYMBOL'

/lex

// -----------------------------------------------
// Syntactic grammar (BNF):

%%

Exp
  : Atom
  | List
  ;

Atom
  : FLOAT { $$ = Number($1) }
  | INT { 
      var lynx = require("lynx-js");
      $$ = new lynx.Int($1);
  }
  | STRING
  | SYMBOL
  ;

List
  : '(' ListEntries ')' { $$ = $2 }
  ;

ListEntries
  : ListEntries Exp { $1.push($2); $$ = $1 }
  | /* empty */     { $$ = [] }
  ;
