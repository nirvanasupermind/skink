/*
skink Standard Library
Copyright (c) nirvanasupermind
Usage permitted under terms of MIT License
*/
(begin
     /*
      A hash table with a single shared scope.
      It stores bindings between variable names and values.
      */
    (class HashMap null (begin
        /* -=Helpers=- */
        /* Filter function */
        (def myFilter (x y) (begin
            (var result (list))
            (for (var i 0) (< i (len x)) (+= i 1) (begin
                (if (y (prop x i) i) (add result (prop x i)))
            ))
            result
        ))

        /* "Smart" but naive way to remove duplicates */
        (def noDupe (x) (begin
            (myFilter x (lambda (item pos)
                                (= (indexOf x item) pos)))
        ))

        /* The constructor for HashMap */
        (def constructor (this keys values) (begin
            /* Default parameters */
            (if (= keys null) (set keys (list)) null)
            (if (= values null) (set values (list)) null)
            /* Convert to list */
            (if (! (= (type keys) "ArrayList")) 
                (set keys (list keys))
                null)

            (if (! (= (type values) "ArrayList")) 
                (set values (list values))
                null)

            (set (prop this "keys") (noDupe keys))
            (set (prop this "values") (noDupe values))
            (set (prop this "length") 
                 (lambda () (len (prop this "keys"))))

            /* Converts the HashMap into String. */
            (set (prop this "toString") (lambda () (begin
                (var result "{${(prop (prop this \"keys\") 0)}=${(prop (prop this \"values\") 0)}") 
                (for (var i 1) (< i (len this)) (+= i 1) (begin
                    (set result "${result}, ${(prop (prop this \"keys\") i)}=${(prop (prop this \"values\") i) }")
                ))
                
                (if (= (len this) 0) (set result "{") null)

                (set result "${result}}")

                result
            )))

            (set (prop this "put") (lambda (name value) (begin
                (var t1 (indexOf (prop this "keys") name))
                (if (! (= t1 null)) /* Existing variable */
                    (set (prop (prop this "values") t1) value)
                    (begin /* else... */
                        (add (prop this "keys") name)
                        (add (prop this "values") value)))
            )))

            (set (prop this "get") (lambda (name) (begin
                (prop (prop this "values") 
                      (indexOf (prop this "keys") name)))
            ))

            (set (prop this "remove") (lambda (name) (begin
                (var t1 (indexOf (prop this "keys") name))
                (remove (prop this "keys") t1)
                (remove (prop this "values") t1)
            )))
        ))
    ))
)
