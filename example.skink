import "skink:math";
object util = {
    "sb": lambda(double a) => double {
        return math.log(1 + math.exp(a));
    }
};

//In an LNS, a number, X, is represented by the logarithm, 
//x, of its absolute value
object Logarithmic = {};

int Logarithmic:new(double a) {
    return {
        "logarithm": math.log(math.abs(a)),
        "sign": if(a >= 0) { 1 } else { -1 },
        "proto": Logarithmic
    };
}

//e -> (1, 1)


int Logarithmic:fromLogarithmAndSign(double logarithm, int sign) {
    return {
        "logarithm": logarithm,
        "sign": sign,
        "proto": Logarithmic
    };
}

Logarithmic Logarithmic:neg(Logarithmic this) {
    return Logarithmic.fromLogarithmAndSign(
        this.logarithm,
        -this.sign
    );
}

Logarithmic Logarithmic:plus(Logarithmic this, Logarithmic other) {
    if(this.sign == 1 && other.sign == 1) {
        double x = this.logarithm;
        double y = other.logarithm;
        
        return Logarithmic.fromLogarithmAndSign(
            x + util.sb(y - x),
            1
        );
    } else {
        //Handle negative numbers
        if(this.sign == 1 && other.sign == -1) {
            return this - (-other);
        } else {
            if(this.sign == -1 && other.sign == -1) {
                return -(-(this) + (-other));
            } else {
                return other - (-this);
            }
        }
    }
}



export Logarithmic;
