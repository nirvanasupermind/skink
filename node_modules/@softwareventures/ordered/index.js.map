{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAGA,IAAY,UAKX;AALD,WAAY,UAAU;IAClB,gDAAW,CAAA;IACX,6CAAS,CAAA;IACT,6CAAS,CAAA;IACT,uDAAe,CAAA;AACnB,CAAC,EALW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAKrB;AAUY,QAAA,OAAO,GAChB,UAAsC,CAAI,EAAE,CAAI;IAC5C,IAAI,CAAC,GAAG,CAAC,EAAE;QACP,OAAO,UAAU,CAAC,MAAM,CAAC;KAC5B;SAAM,IAAI,CAAC,KAAK,CAAC,EAAE;QAChB,OAAO,UAAU,CAAC,KAAK,CAAC;KAC3B;SAAM,IAAI,CAAC,GAAG,CAAC,EAAE;QACd,OAAO,UAAU,CAAC,KAAK,CAAC;KAC3B;SAAM;QACH,OAAO,UAAU,CAAC,SAAS,CAAC;KAC/B;AACL,CAAC,CAAC;AAMN,SAAgB,OAAO,CAAI,UAAyB;IAChD,OAAO,UAAC,CAAI,EAAE,CAAI,IAAK,OAAA,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,EAAjB,CAAiB,CAAC;AAC7C,CAAC;AAFD,0BAEC","sourcesContent":["/**\n * The result of a comparison between two ordered values.\n */\nexport enum Comparison {\n    before = -1,\n    equal = 0,\n    after = 1,\n    undefined = NaN\n}\n\n/**\n * The type of a function that compares two values of type T.\n */\nexport type Comparator<T> = (a: T, b: T) => Comparison;\n\n/**\n * A general purpose comparator for comparing primitive values.\n */\nexport const compare: Comparator<string> & Comparator<number> & Comparator<boolean> =\n    <T extends string | number | boolean>(a: T, b: T) => {\n        if (a < b) {\n            return Comparison.before;\n        } else if (a === b) {\n            return Comparison.equal;\n        } else if (a > b) {\n            return Comparison.after;\n        } else {\n            return Comparison.undefined;\n        }\n    };\n\n/**\n * Returns a new comparator that gives opposite results to the provided\n * comparator.\n */\nexport function reverse<T>(comparator: Comparator<T>): Comparator<T> {\n    return (a: T, b: T) => -comparator(a, b);\n}\n"]}