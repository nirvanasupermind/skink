"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.forEachFn = exports.forEach = exports.excludeNull = exports.filterFn = exports.filter = exports.mapFn = exports.map = exports.mergeFn = exports.merge = exports.empty = exports.entries = exports.values = exports.keys = exports.copy = exports.dictionary = void 0;
var tslib_1 = require("tslib");
/** Creates a new dictionary with the specified properties. */
function dictionary(properties) {
    return copy(properties !== null && properties !== void 0 ? properties : {});
}
exports.dictionary = dictionary;
/** Creates a shallow copy of the specified dictionary. */
function copy(dictionary) {
    return Object.assign(Object.create(null), dictionary);
}
exports.copy = copy;
/* @internal This implementation is for internal use only, the exported declaration is above */
// @ts-ignore duplicate identifier: This is the actual implementation, the exported declaration is above.
exports.keys = Object.keys;
/* @internal This implementation is for internal use only, the exported declaration is above. */
// @ts-ignore duplicate identifier: This is the actual implementation, the exported declaration is above.
exports.values = Object.values;
/* @internal This implementation is for internal use only, the exported declaration is above. */
// @ts-ignore duplicate identifier: This is the actual implementation, the exported declaration is above.
exports.entries = Object.entries;
function empty(dictionary) {
    return exports.keys(dictionary).length === 0;
}
exports.empty = empty;
function merge() {
    var dictionaries = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        dictionaries[_i] = arguments[_i];
    }
    var result = Object.create(null);
    for (var i = 0; i < dictionaries.length; ++i) {
        Object.assign(result, dictionaries[i]);
    }
    return result;
}
exports.merge = merge;
function mergeFn() {
    var dictionaries = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        dictionaries[_i] = arguments[_i];
    }
    var a = merge.apply(void 0, tslib_1.__spreadArray([], tslib_1.__read(dictionaries)));
    return function () {
        var b = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            b[_i] = arguments[_i];
        }
        return merge.apply(void 0, tslib_1.__spreadArray([a], tslib_1.__read(b)));
    };
}
exports.mergeFn = mergeFn;
function map(dictionary, f) {
    var e_1, _a;
    var result = {};
    try {
        for (var _b = tslib_1.__values(exports.entries(dictionary)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = tslib_1.__read(_c.value, 2), key = _d[0], value = _d[1];
            result[key] = f(value, key);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
exports.map = map;
function mapFn(f) {
    return function (dictionary) { return map(dictionary, f); };
}
exports.mapFn = mapFn;
function filter(dictionary, predicate) {
    var e_2, _a;
    var result = {};
    try {
        for (var _b = tslib_1.__values(exports.entries(dictionary)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = tslib_1.__read(_c.value, 2), key = _d[0], value = _d[1];
            if (predicate(value, key)) {
                result[key] = value;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return result;
}
exports.filter = filter;
function filterFn(predicate) {
    return function (dictionary) { return filter(dictionary, predicate); };
}
exports.filterFn = filterFn;
function excludeNull(dictionary) {
    return filter(dictionary, notNull);
}
exports.excludeNull = excludeNull;
function notNull(value) {
    return value != null;
}
function forEach(dictionary, f) {
    var e_3, _a;
    try {
        for (var _b = tslib_1.__values(exports.entries(dictionary)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = tslib_1.__read(_c.value, 2), key = _d[0], value = _d[1];
            f(value, key);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_3) throw e_3.error; }
    }
}
exports.forEach = forEach;
function forEachFn(f) {
    return function (dictionary) { return forEach(dictionary, f); };
}
exports.forEachFn = forEachFn;
//# sourceMappingURL=index.js.map