import { Dictionary, Key, ReadonlyDictionary } from "dictionary-types";
/** Creates a new dictionary with the specified properties. */
export declare function dictionary<T, K extends Key = string>(properties?: ReadonlyDictionary<T, K>): Dictionary<T, K>;
/** Creates a shallow copy of the specified dictionary. */
export declare function copy<T, K extends Key, L extends K = K>(dictionary: ReadonlyDictionary<T, K>): Dictionary<T, L>;
export declare function keys<T extends Key>(dictionary: Readonly<Record<T, unknown>>): string[];
export declare function values<TKey extends Key, TValue>(dictionary: Readonly<Record<TKey, TValue>>): TValue[];
export declare function entries<TKey extends Key, TValue>(dictionary: Readonly<Record<TKey, TValue>>): Array<[string, TValue]>;
export declare function empty<T>(dictionary: ReadonlyDictionary<T>): boolean;
export declare function merge<T>(...dictionaries: Array<ReadonlyDictionary<T>>): Dictionary<T>;
export declare function mergeFn<T>(...dictionaries: Array<ReadonlyDictionary<T>>): (...dictionaries: Array<ReadonlyDictionary<T>>) => Dictionary<T>;
export declare function map<T, U>(dictionary: ReadonlyDictionary<T>, f: (value: T, key: string) => U): Dictionary<U>;
export declare function mapFn<T, U>(f: (value: T, key: string) => U): (dictionary: ReadonlyDictionary<T>) => Dictionary<U>;
export declare function filter<T, U extends T>(dictionary: ReadonlyDictionary<T>, predicate: (value: T) => value is U): Dictionary<U>;
export declare function filter<T>(dictionary: ReadonlyDictionary<T>, predicate: (value: T, key: string) => boolean): Dictionary<T>;
export declare function filterFn<T, U extends T>(predicate: (value: T) => value is U): (dictionary: ReadonlyDictionary<T>) => Dictionary<U>;
export declare function filterFn<T>(predicate: (value: T, key: string) => boolean): (dictionary: ReadonlyDictionary<T>) => Dictionary<T>;
export declare function excludeNull<T>(dictionary: ReadonlyDictionary<T | undefined | null>): Dictionary<T>;
export declare function forEach<T>(dictionary: ReadonlyDictionary<T>, f: (value: T, key: string) => void): void;
export declare function forEachFn<T>(f: (value: T, key: string) => void): (dictionary: ReadonlyDictionary<T>) => void;
