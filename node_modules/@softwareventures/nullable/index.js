"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapNullFn = exports.mapNull = exports.mapNullableFn = exports.mapNullable = exports.mapFn = exports.map = exports.defaultValueFn = exports.defaultValue = exports.notNull = exports.isNotNull = exports.isNull = void 0;
/** Tests if the specified value is null or undefined.
 *
 * Useful as the predicate of filter functions and similar. */
function isNull(value) {
    return value == null;
}
exports.isNull = isNull;
/** Tests if the specified value is null or undefined.
 *
 * Useful as the predicate of filter functions and similar. */
function isNotNull(value) {
    return value != null;
}
exports.isNotNull = isNotNull;
/** Asserts that the specified value is neither null nor undefined, and
 * returns it.
 *
 * @throws TypeError if the value is null or undefined */
function notNull(value) {
    if (value == null) {
        throw new TypeError(`value is ${String(value)}`);
    }
    return value;
}
exports.notNull = notNull;
/** Returns the specified value, or the default value if the specified value
 * is null or undefined.
 *
 * If the default value is expensive to compute, consider using
 * {@link mapNull} instead. */
function defaultValue(nullable, defaultValue) {
    return nullable !== null && nullable !== void 0 ? nullable : defaultValue;
}
exports.defaultValue = defaultValue;
/** Returns a function that returns the specified value, or the default value
 * if the specified value is null or undefined.
 *
 * If the default value is expensive to compute, consider using
 * {@link mapNullFn} instead. */
function defaultValueFn(defaultValue) {
    return nullable => nullable !== null && nullable !== void 0 ? nullable : defaultValue;
}
exports.defaultValueFn = defaultValueFn;
/** If the specified value is null or undefined, returns null.
 *
 * Otherwise, passes the specified value to the provided function and returns
 * the return value of that function. */
function map(nullable, f) {
    var _a;
    return nullable == null ? null : (_a = f(nullable)) !== null && _a !== void 0 ? _a : null;
}
exports.map = map;
/** Returns a function that takes a nullable value as its argument.
 *
 * If the function is called with null or undefined, it returns null.
 *
 * Otherwise, the argument is passed to the callback `f` and the
 * return value of `f` is returned.
 *
 * Curried variant of {@link map}. */
function mapFn(f) {
    return nullable => map(nullable, f);
}
exports.mapFn = mapFn;
/** @internal */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore This is the implementation, the exported declaration is above.
exports.mapNullable = map;
/** @internal */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore This is the implementation, the exported declaration is above.
exports.mapNullableFn = mapFn;
/** Returns the specified value or, if the value is null or undefined, calls
 * the provided callback and returns the result of that function call.
 *
 * Useful as an alternative to {@link defaultValue} if the default value is
 * expensive to compute. */
function mapNull(nullable, f) {
    return nullable == null ? f() : nullable;
}
exports.mapNull = mapNull;
/** Returns a function that returns the specified value or, if the value is
 * null or undefined, calls the provided callback and returns the result of
 * that function call.
 *
 * Useful as an alternative to {@link defaultValueFn} if the default value is
 * expensive to compute. */
function mapNullFn(f) {
    return nullable => mapNull(nullable, f);
}
exports.mapNullFn = mapNullFn;
//# sourceMappingURL=index.js.map