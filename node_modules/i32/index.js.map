{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import {fold} from \"@softwareventures/array\";\n\n/** Coerces the specified value to a signed 32-bit integer. */\nexport function i32(value: number): number {\n    return value | 0;\n}\n\nexport function inot(value: number): number {\n    return ((!(value | 0)) as any) | 0;\n}\n\nexport function icmp(value: number): number {\n    return ~value;\n}\n\nexport function ineg(value: number): number {\n    return (-(value | 0)) | 0;\n}\n\nexport function ipow(a: number, b: number): number {\n    // Adapted from https://stackoverflow.com/a/101613/31662\n    let base = a | 0;\n    let exp = b | 0;\n\n    if (exp < 0) {\n        return 0;\n    }\n\n    if (base === 1) {\n        return 1;\n    }\n\n    if (exp >= 31) {\n        return 0;\n    }\n\n    if (base === 2) {\n        return 1 << exp;\n    }\n\n    let accumulator = 1;\n    while (true) {\n        if (exp & 1) {\n            const next = imul(accumulator, base);\n            if ((accumulator > 0xb504 || base > 0xb504) && idiv(next, accumulator) !== base) {\n                return 0;\n            }\n            accumulator = next;\n        }\n        exp = exp >>> 1;\n        if (exp === 0) {\n            return accumulator;\n        }\n        if (base > 0xb504) {\n            return 0;\n        }\n        base = imul(base, base);\n    }\n}\n\nexport import imul = require(\"imul\");\n\nexport function iproduct(...values: number[]): number {\n    return fold(values, imul, 1);\n}\n\nexport function idiv(a: number, b: number): number {\n    return ((a | 0) / (b | 0)) | 0;\n}\n\nexport function imod(a: number, b: number): number {\n    return ((a | 0) % (b | 0)) | 0;\n}\n\nexport function iadd(a: number, b: number): number {\n    return ((a | 0) + (b | 0)) | 0;\n}\n\nexport function isum(...values: number[]): number {\n    return fold(values, iadd, 0);\n}\n\nexport function isub(a: number, b: number): number {\n    return ((a | 0) - (b | 0)) | 0;\n}\n\nexport function ishl(a: number, b: number): number {\n    return a << b;\n}\n\nexport function ishr(a: number, b: number): number {\n    return a >> b;\n}\n\nexport function ilt(a: number, b: number): number {\n    return (((a | 0) < (b | 0)) as any) | 0;\n}\n\nexport function ilte(a: number, b: number): number {\n    return (((a | 0) <= (b | 0)) as any) | 0;\n}\n\nexport function igt(a: number, b: number): number {\n    return (((a | 0) > (b | 0)) as any) | 0;\n}\n\nexport function igte(a: number, b: number): number {\n    return (((a | 0) >= (b | 0)) as any) | 0;\n}\n\nexport function ieq(a: number, b: number): number {\n    return (((a | 0) === (b | 0)) as any) | 0;\n}\n\nexport function ineq(a: number, b: number): number {\n    return (((a | 0) !== (b | 0)) as any) | 0;\n}\n\nexport function iband(a: number, b: number): number {\n    return a & b;\n}\n\nexport function ixor(a: number, b: number): number {\n    return a ^ b;\n}\n\nexport function ibor(a: number, b: number): number {\n    return a | b;\n}\n\nexport function iand(a: number, b: number): number {\n    return (((a | 0) && (b | 0)) as any) | 0;\n}\n\nexport function ior(a: number, b: number): number {\n    return (((a | 0) || (b | 0)) as any) | 0;\n}"]}