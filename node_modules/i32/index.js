"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ior = exports.iand = exports.ibor = exports.ixor = exports.iband = exports.ineq = exports.ieq = exports.igte = exports.igt = exports.ilte = exports.ilt = exports.ishr = exports.ishl = exports.isub = exports.isum = exports.iadd = exports.imod = exports.idiv = exports.iproduct = exports.ipow = exports.ineg = exports.icmp = exports.inot = exports.i32 = void 0;
var array_1 = require("@softwareventures/array");
function i32(value) {
    return value | 0;
}
exports.i32 = i32;
function inot(value) {
    return (!(value | 0)) | 0;
}
exports.inot = inot;
function icmp(value) {
    return ~value;
}
exports.icmp = icmp;
function ineg(value) {
    return (-(value | 0)) | 0;
}
exports.ineg = ineg;
function ipow(a, b) {
    var base = a | 0;
    var exp = b | 0;
    if (exp < 0) {
        return 0;
    }
    if (base === 1) {
        return 1;
    }
    if (exp >= 31) {
        return 0;
    }
    if (base === 2) {
        return 1 << exp;
    }
    var accumulator = 1;
    while (true) {
        if (exp & 1) {
            var next = exports.imul(accumulator, base);
            if ((accumulator > 0xb504 || base > 0xb504) && idiv(next, accumulator) !== base) {
                return 0;
            }
            accumulator = next;
        }
        exp = exp >>> 1;
        if (exp === 0) {
            return accumulator;
        }
        if (base > 0xb504) {
            return 0;
        }
        base = exports.imul(base, base);
    }
}
exports.ipow = ipow;
exports.imul = require("imul");
function iproduct() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return array_1.fold(values, exports.imul, 1);
}
exports.iproduct = iproduct;
function idiv(a, b) {
    return ((a | 0) / (b | 0)) | 0;
}
exports.idiv = idiv;
function imod(a, b) {
    return ((a | 0) % (b | 0)) | 0;
}
exports.imod = imod;
function iadd(a, b) {
    return ((a | 0) + (b | 0)) | 0;
}
exports.iadd = iadd;
function isum() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return array_1.fold(values, iadd, 0);
}
exports.isum = isum;
function isub(a, b) {
    return ((a | 0) - (b | 0)) | 0;
}
exports.isub = isub;
function ishl(a, b) {
    return a << b;
}
exports.ishl = ishl;
function ishr(a, b) {
    return a >> b;
}
exports.ishr = ishr;
function ilt(a, b) {
    return ((a | 0) < (b | 0)) | 0;
}
exports.ilt = ilt;
function ilte(a, b) {
    return ((a | 0) <= (b | 0)) | 0;
}
exports.ilte = ilte;
function igt(a, b) {
    return ((a | 0) > (b | 0)) | 0;
}
exports.igt = igt;
function igte(a, b) {
    return ((a | 0) >= (b | 0)) | 0;
}
exports.igte = igte;
function ieq(a, b) {
    return ((a | 0) === (b | 0)) | 0;
}
exports.ieq = ieq;
function ineq(a, b) {
    return ((a | 0) !== (b | 0)) | 0;
}
exports.ineq = ineq;
function iband(a, b) {
    return a & b;
}
exports.iband = iband;
function ixor(a, b) {
    return a ^ b;
}
exports.ixor = ixor;
function ibor(a, b) {
    return a | b;
}
exports.ibor = ibor;
function iand(a, b) {
    return ((a | 0) && (b | 0)) | 0;
}
exports.iand = iand;
function ior(a, b) {
    return ((a | 0) || (b | 0)) | 0;
}
exports.ior = ior;
//# sourceMappingURL=index.js.map